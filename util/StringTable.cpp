#include "StringTable.hpp"

PyString* StringTable::str_len = nullptr;
PyString* StringTable::str_true = nullptr;
PyString* StringTable::str_false = nullptr;
PyString* StringTable::str_none = nullptr;
PyString* StringTable::str_next = nullptr;
PyString* StringTable::str_mod = nullptr;
PyString* StringTable::str_init = nullptr;
PyString* StringTable::str_list = nullptr;
PyString* StringTable::str_type = nullptr;
PyString* StringTable::str_str = nullptr;
PyString* StringTable::str_builtin_func = nullptr;
PyString* StringTable::str_method = nullptr;
PyString* StringTable::str_int = nullptr;
PyString* StringTable::str_function = nullptr;
PyString* StringTable::str_dict = nullptr;
PyString* StringTable::str_object = nullptr;
PyString* StringTable::str_isinstance = nullptr;
PyString* StringTable::str_typeof = nullptr;
PyString* StringTable::str_bool = nullptr;
PyString* StringTable::str_float = nullptr;
PyString* StringTable::str_NoneType = nullptr;
PyString* StringTable::str_mro = nullptr;
PyString* StringTable::str_class = nullptr;
PyString* StringTable::str_super = nullptr;
PyString* StringTable::str_getattr = nullptr;
PyString* StringTable::str_setattr = nullptr;
PyString* StringTable::str_dict_values = nullptr;
PyString* StringTable::str_dict_keys = nullptr;
PyString* StringTable::str_dict_items = nullptr;
PyString* StringTable::str_range = nullptr;

void StringTable::initialize() {
    str_len = PyString::createString("len");
    str_true = PyString::createString("True");
    str_false = PyString::createString("False");
    str_none = PyString::createString("None");
    str_next = PyString::createString("__next__");
    str_mod = PyString::createString("__module__");
    str_init = PyString::createString("__init__");
    str_class = PyString::createString("__class__");
    str_list = PyString::createString("list");
    str_type = PyString::createString("type");
    str_typeof = PyString::createString("typeof");
    str_str = PyString::createString("str");
    str_builtin_func = PyString::createString("builtin_function_or_method");
    str_method = PyString::createString("method");
    str_int = PyString::createString("int");
    str_function = PyString::createString("function");
    str_dict = PyString::createString("dict");
    str_object = PyString::createString("object");
    str_isinstance = PyString::createString("isinstance");
    str_bool = PyString::createString("bool");
    str_float = PyString::createString("float");
    str_NoneType = PyString::createString("NoneType");
    str_mro = PyString::createString("mro");
    str_super = PyString::createString("super");
    str_getattr = PyString::createString("__getattr__");
    str_setattr = PyString::createString("__setattr__");
    str_dict_values = PyString::createString("dict_values");
    str_dict_items = PyString::createString("dict_items");
    str_dict_keys = PyString::createString("dict_key");
    str_range = PyString::createString("range");
}

void StringTable::oops_do(OopClosure* closure) {
    closure->do_oop(reinterpret_cast<PyObject**>(&str_len));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_true));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_false));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_none));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_next));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_mod));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_init));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_class));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_list));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_type));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_typeof));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_str));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_builtin_func));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_method));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_int));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_function));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_dict));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_object));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_isinstance));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_bool));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_float));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_NoneType));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_mro));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_super));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_getattr));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_setattr));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_dict_values));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_dict_items));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_dict_keys));
    closure->do_oop(reinterpret_cast<PyObject**>(&str_range));
}